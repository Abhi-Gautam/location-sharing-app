version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: test_postgres
    environment:
      POSTGRES_DB: location_sharing
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: dev123
    ports:
      - "5432:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./backend_rust/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev -d location_sharing"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test_network

  # Redis Cache & Pub/Sub
  redis:
    image: redis:7-alpine
    container_name: test_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test_network

  # Rust API Server
  rust-api:
    build:
      context: ./backend_rust
      target: api-runtime
    container_name: test_rust_api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://dev:dev123@postgres:5432/location_sharing
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=test-secret-key-for-stress-testing
      - RUST_API_PORT=8000
      - APP__APP__LOG_LEVEL=info
      - APP__APP__ENVIRONMENT=test
      - APP__SERVER__CORS_ALLOWED_ORIGINS=["*"]
      - APP__DATABASE__MAX_CONNECTIONS=20
      - APP__REDIS__MAX_CONNECTIONS=20
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - test_network

  # Rust WebSocket Server
  rust-ws:
    build:
      context: ./backend_rust
      target: ws-runtime
    container_name: test_rust_ws
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://dev:dev123@postgres:5432/location_sharing
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=test-secret-key-for-stress-testing
      - RUST_WS_PORT=8001
      - APP__APP__LOG_LEVEL=info
      - APP__APP__ENVIRONMENT=test
      - APP__DATABASE__MAX_CONNECTIONS=20
      - APP__REDIS__MAX_CONNECTIONS=20
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - test_network

  # Elixir Backend
  elixir:
    build:
      context: ./backend_elixir
    container_name: test_elixir
    ports:
      - "4000:4000"
    environment:
      - DATABASE_URL=postgresql://dev:dev123@postgres:5432/location_sharing
      - SECRET_KEY_BASE=test-secret-key-for-stress-testing-elixir-backend
      - PHX_HOST=0.0.0.0
      - PHX_PORT=4000
      - MIX_ENV=prod
      - PHX_SERVER=true
      - PORT=4000
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - test_network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: test_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
      - '--web.enable-remote-write-receiver'
    networks:
      - test_network

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: test_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - test_network

  # Redis Exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: test_redis_exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis
    networks:
      - test_network

  # K6 Load Testing
  k6:
    image: grafana/k6:latest
    container_name: test_k6
    volumes:
      - ./stress-tests/k6:/scripts
    networks:
      - test_network
    profiles:
      - testing

volumes:
  postgres_test_data:
    driver: local
  redis_test_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  test_network:
    driver: bridge